"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/yahoo-finance-options";
exports.ids = ["pages/api/yahoo-finance-options"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-fetch");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fyahoo-finance-options&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cyahoo-finance-options.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fyahoo-finance-options&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cyahoo-finance-options.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_yahoo_finance_options_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\yahoo-finance-options.js */ \"(api)/./pages/api/yahoo-finance-options.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_yahoo_finance_options_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_yahoo_finance_options_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/yahoo-finance-options\",\n        pathname: \"/api/yahoo-finance-options\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_yahoo_finance_options_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnlhaG9vLWZpbmFuY2Utb3B0aW9ucyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDeWFob28tZmluYW5jZS1vcHRpb25zLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ21FO0FBQ25FO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxnRUFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsZ0VBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2FoZi1jYXBpdGFsLXdlYnNpdGUvPzg2ZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFx5YWhvby1maW5hbmNlLW9wdGlvbnMuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS95YWhvby1maW5hbmNlLW9wdGlvbnNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS95YWhvby1maW5hbmNlLW9wdGlvbnNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fyahoo-finance-options&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cyahoo-finance-options.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/yahoo-finance-options.js":
/*!********************************************!*\
  !*** ./pages/api/yahoo-finance-options.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"node-fetch\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_fetch__WEBPACK_IMPORTED_MODULE_0__);\n\n// Yahoo Finance Options Data Fetcher\n// This replaces Polygon.io API calls to avoid rate limiting\n// Yahoo Finance API endpoints (unofficial but stable)\nconst YAHOO_FINANCE_BASE = \"https://query1.finance.yahoo.com/v8/finance/chart\";\nconst YAHOO_OPTIONS_BASE = \"https://query2.finance.yahoo.com/v7/finance/options\";\n// Cache for options data to reduce API calls\nconst optionsCache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n// Get current stock price from Yahoo Finance\nasync function getCurrentPrice(ticker) {\n    try {\n        const url = `${YAHOO_FINANCE_BASE}/${ticker}`;\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url);\n        if (!response.ok) {\n            throw new Error(`Yahoo Finance API error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n            throw new Error(\"No price data available\");\n        }\n        const result = data.chart.result[0];\n        const currentPrice = result.meta.regularMarketPrice;\n        return {\n            price: currentPrice,\n            currency: result.meta.currency,\n            exchange: result.meta.exchangeName,\n            timestamp: result.meta.regularMarketTime\n        };\n    } catch (error) {\n        console.error(`Error fetching current price for ${ticker}:`, error.message);\n        throw error;\n    }\n}\n// Get available expiration dates for a ticker\nasync function getExpirationDates(ticker) {\n    try {\n        const url = `${YAHOO_OPTIONS_BASE}/${ticker}`;\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url);\n        if (!response.ok) {\n            throw new Error(`Yahoo Finance options API error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.optionChain || !data.optionChain.result || data.optionChain.result.length === 0) {\n            throw new Error(\"No options data available\");\n        }\n        const result = data.optionChain.result[0];\n        const expirations = result.expirationDates || [];\n        // Convert timestamps to date strings\n        const expirationDates = expirations.map((timestamp)=>{\n            const date = new Date(timestamp * 1000);\n            return date.toISOString().split(\"T\")[0]; // YYYY-MM-DD format\n        });\n        return expirationDates.sort();\n    } catch (error) {\n        console.error(`Error fetching expiration dates for ${ticker}:`, error.message);\n        throw error;\n    }\n}\n// Get options data for a specific ticker and expiration\nasync function getOptionsData(ticker, expirationDate) {\n    const cacheKey = `${ticker}-${expirationDate}`;\n    const now = Date.now();\n    // Check cache first\n    if (optionsCache.has(cacheKey)) {\n        const cached = optionsCache.get(cacheKey);\n        if (now - cached.timestamp < CACHE_DURATION) {\n            return cached.data;\n        }\n    }\n    try {\n        // Convert date to timestamp\n        const expirationTimestamp = Math.floor(new Date(expirationDate).getTime() / 1000);\n        const url = `${YAHOO_OPTIONS_BASE}/${ticker}?date=${expirationTimestamp}`;\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url);\n        if (!response.ok) {\n            throw new Error(`Yahoo Finance options API error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.optionChain || !data.optionChain.result || data.optionChain.result.length === 0) {\n            throw new Error(\"No options data available for this expiration\");\n        }\n        const result = data.optionChain.result[0];\n        const currentPrice = result.quote.regularMarketPrice;\n        // Find ATM strike price (closest to current price)\n        const calls = result.options[0]?.calls || [];\n        const puts = result.options[0]?.puts || [];\n        if (calls.length === 0 || puts.length === 0) {\n            throw new Error(\"No options contracts available\");\n        }\n        // Find the strike closest to current price\n        let atmStrike = null;\n        let minDistance = Infinity;\n        calls.forEach((call)=>{\n            const distance = Math.abs(call.strike - currentPrice);\n            if (distance < minDistance) {\n                minDistance = distance;\n                atmStrike = call.strike;\n            }\n        });\n        if (!atmStrike) {\n            throw new Error(\"Could not find ATM strike price\");\n        }\n        // Find call and put options at ATM strike\n        const atmCall = calls.find((call)=>call.strike === atmStrike);\n        const atmPut = puts.find((put)=>put.strike === atmStrike);\n        if (!atmCall || !atmPut) {\n            throw new Error(\"Could not find ATM call and put options\");\n        }\n        // Calculate straddle premium (use mid price)\n        const callMid = (atmCall.bid + atmCall.ask) / 2;\n        const putMid = (atmPut.bid + atmPut.ask) / 2;\n        const totalPremium = callMid + putMid;\n        const optionsData = {\n            ticker,\n            expirationDate,\n            currentPrice,\n            strikePrice: atmStrike,\n            callOption: {\n                strike: atmCall.strike,\n                bid: atmCall.bid,\n                ask: atmCall.ask,\n                mid: callMid,\n                volume: atmCall.volume,\n                openInterest: atmCall.openInterest\n            },\n            putOption: {\n                strike: atmPut.strike,\n                bid: atmPut.bid,\n                ask: atmPut.ask,\n                mid: putMid,\n                volume: atmPut.volume,\n                openInterest: atmPut.openInterest\n            },\n            totalPremium,\n            dataQuality: \"high\" // Yahoo Finance data is generally reliable\n        };\n        // Cache the result\n        optionsCache.set(cacheKey, {\n            data: optionsData,\n            timestamp: now\n        });\n        return optionsData;\n    } catch (error) {\n        console.error(`Error fetching options data for ${ticker} ${expirationDate}:`, error.message);\n        throw error;\n    }\n}\n// Estimate straddle premium when exact options data is not available\nfunction estimateStraddlePremium(currentPrice, daysToExpiration, volatility = 0.3) {\n    // Simple Black-Scholes approximation for straddle premium\n    const timeToExpiration = daysToExpiration / 365;\n    const sqrtTime = Math.sqrt(timeToExpiration);\n    // Approximate ATM straddle premium using volatility\n    // This is a simplified calculation - in reality, you'd use the full Black-Scholes formula\n    const estimatedPremium = currentPrice * volatility * sqrtTime * 0.4; // 0.4 is an empirical factor\n    return Math.max(estimatedPremium, currentPrice * 0.01); // Minimum 1% of stock price\n}\n// Get straddle data with fallback to estimation\nasync function getStraddleData(ticker, expirationDate = null, daysToExpiration = 30) {\n    try {\n        // Get current price first\n        const priceData = await getCurrentPrice(ticker);\n        const currentPrice = priceData.price;\n        // Get available expiration dates\n        let availableExpirations = [];\n        try {\n            availableExpirations = await getExpirationDates(ticker);\n        } catch (error) {\n            console.warn(`Could not get expiration dates for ${ticker}:`, error.message);\n        }\n        // If no expiration date provided, return available expirations without forcing a selection\n        if (!expirationDate) {\n            return {\n                ticker,\n                currentPrice,\n                availableExpirations,\n                message: \"Please select an expiration date from the available options\",\n                source: \"expiration_list\",\n                dataQuality: \"none\"\n            };\n        }\n        // Check if the requested expiration date is available\n        if (availableExpirations.length > 0 && !availableExpirations.includes(expirationDate)) {\n            return {\n                ticker,\n                currentPrice,\n                requestedExpiration: expirationDate,\n                availableExpirations,\n                message: `Requested expiration date ${expirationDate} is not available`,\n                source: \"expiration_not_available\",\n                dataQuality: \"none\"\n            };\n        }\n        // Try to get real options data for the specified expiration\n        try {\n            const optionsData = await getOptionsData(ticker, expirationDate);\n            return {\n                ...optionsData,\n                availableExpirations,\n                source: \"yahoo_finance\",\n                executionDate: new Date().toISOString().split(\"T\")[0]\n            };\n        } catch (error) {\n            console.warn(`Could not get options data for ${ticker} ${expirationDate}, using estimation:`, error.message);\n            // Fallback to estimation\n            const estimatedPremium = estimateStraddlePremium(currentPrice, daysToExpiration);\n            return {\n                ticker,\n                expirationDate,\n                currentPrice,\n                strikePrice: currentPrice,\n                totalPremium: estimatedPremium,\n                availableExpirations,\n                source: \"estimation\",\n                executionDate: new Date().toISOString().split(\"T\")[0],\n                dataQuality: \"medium\",\n                note: \"Premium estimated using Black-Scholes approximation\"\n            };\n        }\n    } catch (error) {\n        console.error(`Error getting straddle data for ${ticker}:`, error.message);\n        throw error;\n    }\n}\n// Batch process multiple tickers with rate limiting\nasync function getBatchStraddleData(tickers, maxConcurrent = 3, delayMs = 1000) {\n    const results = [];\n    for(let i = 0; i < tickers.length; i += maxConcurrent){\n        const batch = tickers.slice(i, i + maxConcurrent);\n        const batchPromises = batch.map(async (ticker)=>{\n            try {\n                const straddleData = await getStraddleData(ticker.ticker, null, 30);\n                return {\n                    ...ticker,\n                    straddleData\n                };\n            } catch (error) {\n                console.error(`Error processing ${ticker.ticker}:`, error.message);\n                return {\n                    ...ticker,\n                    error: error.message,\n                    straddleData: null\n                };\n            }\n        });\n        const batchResults = await Promise.all(batchPromises);\n        results.push(...batchResults);\n        // Add delay between batches to be respectful to Yahoo Finance\n        if (i + maxConcurrent < tickers.length) {\n            await new Promise((resolve)=>setTimeout(resolve, delayMs));\n        }\n    }\n    return results;\n}\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { ticker, expiration, batch } = req.query;\n    try {\n        if (batch === \"true\") {\n            // Batch processing for automation\n            const { tickers } = req.body || {};\n            if (!tickers || !Array.isArray(tickers)) {\n                return res.status(400).json({\n                    error: \"Missing tickers array in request body for batch processing\"\n                });\n            }\n            const results = await getBatchStraddleData(tickers);\n            return res.status(200).json({\n                timestamp: new Date().toISOString(),\n                totalTickers: tickers.length,\n                results: results\n            });\n        } else if (ticker) {\n            // Single ticker processing\n            const straddleData = await getStraddleData(ticker, expiration);\n            return res.status(200).json(straddleData);\n        } else {\n            return res.status(400).json({\n                error: \"Missing required parameter: ticker or batch=true\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error in yahoo-finance-options API:\", error);\n        return res.status(500).json({\n            error: \"Failed to fetch options data\",\n            details:  true ? error.message : 0\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/yahoo-finance-options.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fyahoo-finance-options&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cyahoo-finance-options.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();