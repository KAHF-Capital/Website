"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/process-all-csv";
exports.ids = ["pages/api/process-all-csv"];
exports.modules = {

/***/ "csv-parser":
/*!*****************************!*\
  !*** external "csv-parser" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("csv-parser");

/***/ }),

/***/ "csv-writer":
/*!*****************************!*\
  !*** external "csv-writer" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("csv-writer");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprocess-all-csv&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cprocess-all-csv.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprocess-all-csv&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cprocess-all-csv.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_process_all_csv_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\process-all-csv.js */ \"(api)/./pages/api/process-all-csv.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_process_all_csv_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_process_all_csv_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/process-all-csv\",\n        pathname: \"/api/process-all-csv\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_process_all_csv_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnByb2Nlc3MtYWxsLWNzdiZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDcHJvY2Vzcy1hbGwtY3N2LmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzZEO0FBQzdEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQywwREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsMERBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2FoZi1jYXBpdGFsLXdlYnNpdGUvPzA2MjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxwcm9jZXNzLWFsbC1jc3YuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wcm9jZXNzLWFsbC1jc3ZcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wcm9jZXNzLWFsbC1jc3ZcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprocess-all-csv&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cprocess-all-csv.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/process-all-csv.js":
/*!**************************************!*\
  !*** ./pages/api/process-all-csv.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst csv = __webpack_require__(/*! csv-parser */ \"csv-parser\");\nconst createCsvWriter = (__webpack_require__(/*! csv-writer */ \"csv-writer\").createObjectCsvWriter);\n// Data directory for CSV files\nconst DATA_DIR = path.join(process.cwd(), \"data\");\nconst DAILY_CSV_DIR = path.join(DATA_DIR, \"daily\");\nconst PROCESSED_DIR = path.join(DATA_DIR, \"processed\");\n// Ensure directories exist\nfunction ensureDirectories() {\n    if (!fs.existsSync(DATA_DIR)) {\n        fs.mkdirSync(DATA_DIR, {\n            recursive: true\n        });\n    }\n    if (!fs.existsSync(DAILY_CSV_DIR)) {\n        fs.mkdirSync(DAILY_CSV_DIR, {\n            recursive: true\n        });\n    }\n    if (!fs.existsSync(PROCESSED_DIR)) {\n        fs.mkdirSync(PROCESSED_DIR, {\n            recursive: true\n        });\n    }\n}\n// Parse CSV file and extract dark pool trades with unlimited processing\nfunction parseDarkPoolTradesUnlimited(csvFilePath) {\n    return new Promise((resolve, reject)=>{\n        const darkPoolTrades = [];\n        let rowCount = 0;\n        console.log(`Starting to process: ${path.basename(csvFilePath)}`);\n        fs.createReadStream(csvFilePath).pipe(csv()).on(\"data\", (row)=>{\n            rowCount++;\n            // Log progress every 100,000 rows\n            if (rowCount % 100000 === 0) {\n                console.log(`Processed ${rowCount.toLocaleString()} rows from ${path.basename(csvFilePath)}`);\n            }\n            // Check if this is a dark pool trade\n            // Dark pool trades have exchange = 4 AND trf_id present\n            if (row.exchange === \"4\" && row.trf_id && row.trf_id.trim() !== \"\") {\n                const tradeDate = new Date(row.timestamp || row.t || new Date()).toISOString().split(\"T\")[0];\n                darkPoolTrades.push({\n                    ticker: (row.ticker || row.symbol || \"UNKNOWN\").toUpperCase(),\n                    volume: parseInt(row.size || row.volume || 0),\n                    price: parseFloat(row.price || row.p || 0),\n                    timestamp: row.timestamp || row.t || new Date().toISOString(),\n                    trade_date: tradeDate,\n                    exchange: row.exchange,\n                    trf_id: row.trf_id\n                });\n            }\n        }).on(\"end\", ()=>{\n            console.log(`Completed processing ${path.basename(csvFilePath)}: ${rowCount.toLocaleString()} total rows, ${darkPoolTrades.length} dark pool trades found`);\n            resolve(darkPoolTrades);\n        }).on(\"error\", (error)=>{\n            console.error(`Error processing ${path.basename(csvFilePath)}:`, error);\n            reject(error);\n        });\n    });\n}\n// Group dark pool trades by date and ticker\nfunction groupTradesByDateAndTicker(trades) {\n    const dateMap = {};\n    trades.forEach((trade)=>{\n        const date = trade.trade_date;\n        const ticker = trade.ticker;\n        if (!dateMap[date]) {\n            dateMap[date] = {};\n        }\n        if (!dateMap[date][ticker]) {\n            dateMap[date][ticker] = {\n                ticker: ticker,\n                total_volume: 0,\n                trade_count: 0,\n                avg_price: 0,\n                total_value: 0,\n                min_price: Infinity,\n                max_price: 0\n            };\n        }\n        const tickerData = dateMap[date][ticker];\n        tickerData.total_volume += trade.volume;\n        tickerData.trade_count += 1;\n        tickerData.total_value += trade.volume * trade.price;\n        tickerData.min_price = Math.min(tickerData.min_price, trade.price);\n        tickerData.max_price = Math.max(tickerData.max_price, trade.price);\n    });\n    // Calculate averages and convert to arrays\n    Object.keys(dateMap).forEach((date)=>{\n        Object.keys(dateMap[date]).forEach((ticker)=>{\n            const data = dateMap[date][ticker];\n            data.avg_price = data.total_value / data.total_volume;\n            data.min_price = data.min_price === Infinity ? 0 : data.min_price;\n        });\n        // Convert ticker objects to arrays and sort by volume\n        dateMap[date] = Object.values(dateMap[date]).sort((a, b)=>b.total_volume - a.total_volume);\n    });\n    return dateMap;\n}\n// Save processed data to JSON files\nfunction saveProcessedData(dateMap, sourceFile) {\n    const summary = {\n        source_file: path.basename(sourceFile),\n        processed_at: new Date().toISOString(),\n        total_dates: Object.keys(dateMap).length,\n        total_tickers: Object.values(dateMap).reduce((sum, tickers)=>sum + tickers.length, 0),\n        total_trades: Object.values(dateMap).reduce((sum, tickers)=>sum + tickers.reduce((tickerSum, ticker)=>tickerSum + ticker.trade_count, 0), 0),\n        total_volume: Object.values(dateMap).reduce((sum, tickers)=>sum + tickers.reduce((tickerSum, ticker)=>tickerSum + ticker.total_volume, 0), 0),\n        dates: Object.keys(dateMap).sort()\n    };\n    // Save summary\n    const summaryPath = path.join(PROCESSED_DIR, `${path.basename(sourceFile, \".csv\")}_summary.json`);\n    fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2));\n    // Save detailed data for each date\n    Object.keys(dateMap).forEach((date)=>{\n        const datePath = path.join(PROCESSED_DIR, `${date}_${path.basename(sourceFile, \".csv\")}.json`);\n        const dateData = {\n            date: date,\n            source_file: path.basename(sourceFile),\n            processed_at: new Date().toISOString(),\n            total_tickers: dateMap[date].length,\n            total_trades: dateMap[date].reduce((sum, ticker)=>sum + ticker.trade_count, 0),\n            total_volume: dateMap[date].reduce((sum, ticker)=>sum + ticker.total_volume, 0),\n            tickers: dateMap[date]\n        };\n        fs.writeFileSync(datePath, JSON.stringify(dateData, null, 2));\n    });\n    return summary;\n}\n// Get all CSV files in the daily directory\nfunction getAllCSVFiles() {\n    const files = fs.readdirSync(DAILY_CSV_DIR).filter((file)=>file.endsWith(\".csv\")).map((file)=>({\n            name: file,\n            path: path.join(DAILY_CSV_DIR, file),\n            size: fs.statSync(path.join(DAILY_CSV_DIR, file)).size\n        })).sort((a, b)=>a.size - b.size); // Process smaller files first\n    return files;\n}\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        ensureDirectories();\n        const { file = \"all\" } = req.body;\n        const csvFiles = getAllCSVFiles();\n        if (csvFiles.length === 0) {\n            return res.status(404).json({\n                error: \"No CSV files found\",\n                message: `Please upload CSV files to the ${DAILY_CSV_DIR} directory`\n            });\n        }\n        console.log(`Found ${csvFiles.length} CSV files to process`);\n        const results = [];\n        // Process files\n        for (const csvFile of csvFiles){\n            if (file !== \"all\" && csvFile.name !== file) {\n                continue;\n            }\n            console.log(`Processing file: ${csvFile.name} (${(csvFile.size / 1024 / 1024).toFixed(2)} MB)`);\n            try {\n                // Parse dark pool trades\n                const darkPoolTrades = await parseDarkPoolTradesUnlimited(csvFile.path);\n                if (darkPoolTrades.length === 0) {\n                    console.log(`No dark pool trades found in ${csvFile.name}`);\n                    results.push({\n                        file: csvFile.name,\n                        status: \"completed\",\n                        message: \"No dark pool trades found\",\n                        trades_found: 0\n                    });\n                    continue;\n                }\n                // Group by date and ticker\n                const dateMap = groupTradesByDateAndTicker(darkPoolTrades);\n                // Save processed data\n                const summary = saveProcessedData(dateMap, csvFile.name);\n                results.push({\n                    file: csvFile.name,\n                    status: \"completed\",\n                    trades_found: darkPoolTrades.length,\n                    dates_processed: Object.keys(dateMap).length,\n                    total_tickers: summary.total_tickers,\n                    total_volume: summary.total_volume,\n                    summary: summary\n                });\n                console.log(`Successfully processed ${csvFile.name}: ${darkPoolTrades.length} dark pool trades across ${Object.keys(dateMap).length} dates`);\n            } catch (error) {\n                console.error(`Error processing ${csvFile.name}:`, error);\n                results.push({\n                    file: csvFile.name,\n                    status: \"error\",\n                    error: error.message\n                });\n            }\n        }\n        return res.status(200).json({\n            message: \"CSV processing completed\",\n            files_processed: results.length,\n            results: results,\n            processed_files_location: PROCESSED_DIR\n        });\n    } catch (error) {\n        console.error(\"Error in CSV processing:\", error);\n        return res.status(500).json({\n            error: \"Error processing CSV files\",\n            details:  true ? error.message : 0\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/process-all-csv.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprocess-all-csv&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cprocess-all-csv.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();