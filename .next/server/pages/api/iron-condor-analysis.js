"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/iron-condor-analysis";
exports.ids = ["pages/api/iron-condor-analysis"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Firon-condor-analysis&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ciron-condor-analysis.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Firon-condor-analysis&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ciron-condor-analysis.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_iron_condor_analysis_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\iron-condor-analysis.js */ \"(api)/./pages/api/iron-condor-analysis.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_iron_condor_analysis_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_iron_condor_analysis_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/iron-condor-analysis\",\n        pathname: \"/api/iron-condor-analysis\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_iron_condor_analysis_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmlyb24tY29uZG9yLWFuYWx5c2lzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNpcm9uLWNvbmRvci1hbmFseXNpcy5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNrRTtBQUNsRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsK0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLCtEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2thaGYtY2FwaXRhbC13ZWJzaXRlLz85OWFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcaXJvbi1jb25kb3ItYW5hbHlzaXMuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pcm9uLWNvbmRvci1hbmFseXNpc1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2lyb24tY29uZG9yLWFuYWx5c2lzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Firon-condor-analysis&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ciron-condor-analysis.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/iron-condor-analysis.js":
/*!*******************************************!*\
  !*** ./pages/api/iron-condor-analysis.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { ticker, shortCallStrike, shortPutStrike, longCallStrike, longPutStrike, totalCredit, totalDebit, currentPrice, daysToExpiration } = req.body;\n    if (!ticker || !shortCallStrike || !shortPutStrike || !longCallStrike || !longPutStrike) {\n        return res.status(400).json({\n            error: \"Missing required parameters: ticker and all strike prices are required\"\n        });\n    }\n    // Validate Iron Condor setup\n    if (longPutStrike >= shortPutStrike || shortPutStrike >= shortCallStrike || shortCallStrike >= longCallStrike) {\n        return res.status(400).json({\n            error: \"Invalid Iron Condor setup. Strikes must follow: Long Put < Short Put < Short Call < Long Call\"\n        });\n    }\n    const effectivePrice = currentPrice || shortCallStrike;\n    try {\n        const netCredit = (totalCredit || 0) - (totalDebit || 0);\n        // Calculate breakeven points\n        const upperBreakeven = parseFloat(shortCallStrike) + netCredit;\n        const lowerBreakeven = parseFloat(shortPutStrike) - netCredit;\n        const upperBreakevenPct = (upperBreakeven - effectivePrice) / effectivePrice;\n        const lowerBreakevenPct = (lowerBreakeven - effectivePrice) / effectivePrice;\n        // Fetch historical data for analysis\n        const historicalData = await fetchHistoricalData(ticker, daysToExpiration || 30);\n        // Analyze historical profitability for Iron Condor\n        const analysis = analyzeIronCondorProfitability(historicalData, upperBreakevenPct, lowerBreakevenPct, parseFloat(shortCallStrike), parseFloat(shortPutStrike), netCredit);\n        res.status(200).json(analysis);\n    } catch (error) {\n        console.error(\"Error in Iron Condor analysis:\", error);\n        res.status(500).json({\n            error: \"Failed to perform analysis\"\n        });\n    }\n}\n// Fetch historical price data\nasync function fetchHistoricalData(ticker, daysToExpiration) {\n    try {\n        // Using Alpha Vantage API for historical data\n        const apiKey = process.env.ALPHA_VANTAGE_API_KEY || \"demo\";\n        const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${apiKey}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data[\"Error Message\"]) {\n            console.log(`Alpha Vantage error for ${ticker}:`, data[\"Error Message\"]);\n            throw new Error(\"Invalid ticker symbol\");\n        }\n        if (data[\"Note\"]) {\n            // API limit reached, return mock historical data\n            console.log(`Alpha Vantage API limit reached for ${ticker}, using mock data`);\n            return generateMockHistoricalData(daysToExpiration);\n        }\n        const timeSeries = data[\"Time Series (Daily)\"];\n        if (!timeSeries) {\n            console.log(`No time series data for ${ticker}`);\n            throw new Error(\"No historical data available\");\n        }\n        // Convert to array and sort by date\n        const historicalPrices = Object.entries(timeSeries).map(([date, values])=>({\n                date,\n                price: parseFloat(values[\"4. close\"])\n            })).filter((item)=>!isNaN(item.price) && item.price > 0) // Filter out invalid prices\n        .sort((a, b)=>new Date(a.date) - new Date(b.date));\n        if (historicalPrices.length === 0) {\n            console.log(`No valid price data for ${ticker}`);\n            throw new Error(\"No valid historical price data\");\n        }\n        // Calculate price movements for the specified period\n        const movements = calculatePriceMovements(historicalPrices, daysToExpiration);\n        if (movements.length === 0) {\n            console.log(`No price movements calculated for ${ticker}, using mock data`);\n            return generateMockHistoricalData(daysToExpiration);\n        }\n        // Use all available movements, even if less than traditional minimums\n        console.log(`Found ${movements.length} price movements for ${ticker} Iron Condor analysis`);\n        return movements;\n    } catch (error) {\n        console.error(`Error fetching historical data for ${ticker}:`, error.message);\n        // Return mock data as fallback\n        return generateMockHistoricalData(daysToExpiration);\n    }\n}\n// Calculate price movements over specified period\nfunction calculatePriceMovements(historicalPrices, daysToExpiration) {\n    const movements = [];\n    // Ensure we have enough data points\n    if (historicalPrices.length < daysToExpiration + 1) {\n        return movements;\n    }\n    for(let i = 0; i < historicalPrices.length - daysToExpiration; i++){\n        const startPrice = historicalPrices[i].price;\n        const endPrice = historicalPrices[i + daysToExpiration].price;\n        // Only include valid price data\n        if (startPrice > 0 && endPrice > 0) {\n            const percentMove = (endPrice - startPrice) / startPrice;\n            movements.push({\n                startDate: historicalPrices[i].date,\n                endDate: historicalPrices[i + daysToExpiration].date,\n                startPrice,\n                endPrice,\n                percentMove\n            });\n        }\n    }\n    return movements;\n}\n// Generate mock historical data for demo purposes\nfunction generateMockHistoricalData(daysToExpiration) {\n    const movements = [];\n    const basePrice = 100;\n    const volatility = 0.02; // 2% daily volatility\n    // Use all available data points, no arbitrary limits\n    const samples = Math.max(10, Math.min(500 - daysToExpiration, 1000));\n    for(let i = 0; i < samples; i++){\n        let cumulativeMove = 0;\n        let currentPrice = basePrice;\n        for(let day = 0; day < daysToExpiration; day++){\n            const randomMove = (Math.random() - 0.5) * volatility * 2;\n            const meanReversion = (basePrice - currentPrice) * 0.0005;\n            const dailyMove = randomMove + meanReversion;\n            cumulativeMove += dailyMove;\n            currentPrice = currentPrice * (1 + dailyMove);\n        }\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() - (samples - i) * 2);\n        const endDate = new Date(startDate);\n        endDate.setDate(endDate.getDate() + daysToExpiration);\n        movements.push({\n            startDate: startDate.toISOString().split(\"T\")[0],\n            endDate: endDate.toISOString().split(\"T\")[0],\n            startPrice: basePrice,\n            endPrice: basePrice * (1 + cumulativeMove),\n            percentMove: cumulativeMove\n        });\n    }\n    return movements;\n}\n// Analyze profitability specifically for Iron Condor strategy (simplified like straddle)\nfunction analyzeIronCondorProfitability(historicalData, upperBreakevenPct, lowerBreakevenPct, shortCallStrike, shortPutStrike, netCredit) {\n    let inProfitZoneCount = 0;\n    let aboveUpperBreakevenCount = 0;\n    let belowLowerBreakevenCount = 0;\n    let totalValidSamples = 0;\n    // Ensure we have data to work with\n    if (!historicalData || historicalData.length === 0) {\n        return {\n            inProfitZone: 0,\n            aboveUpperBreakeven: 0,\n            belowLowerBreakeven: 0,\n            totalSamples: 0,\n            profitableRate: 0,\n            upperBreakevenPct: upperBreakevenPct * 100,\n            lowerBreakevenPct: lowerBreakevenPct * 100,\n            avgMove: 0,\n            maxMove: 0,\n            minMove: 0,\n            dataQuality: \"none\"\n        };\n    }\n    // Filter out extreme outliers (more than 50% moves in either direction) - same as straddle\n    let filteredData = historicalData.filter((movement)=>{\n        const absMove = Math.abs(movement.percentMove);\n        return absMove <= 0.5; // Filter out moves > 50%\n    });\n    if (filteredData.length === 0) {\n        // If all data is filtered out, use original data\n        filteredData = historicalData;\n    }\n    filteredData.forEach((movement)=>{\n        const percentMove = movement.percentMove;\n        // Iron Condor is profitable when price stays between breakeven points\n        if (percentMove < upperBreakevenPct && percentMove > lowerBreakevenPct) {\n            inProfitZoneCount++;\n        }\n        // Track losses outside profit zone\n        if (percentMove >= upperBreakevenPct) {\n            aboveUpperBreakevenCount++;\n        }\n        if (percentMove <= lowerBreakevenPct) {\n            belowLowerBreakevenCount++;\n        }\n        totalValidSamples++;\n    });\n    const profitableRate = totalValidSamples > 0 ? inProfitZoneCount / totalValidSamples * 100 : 0;\n    // Calculate additional metrics safely - same as straddle\n    const avgMove = filteredData.length > 0 ? filteredData.reduce((sum, m)=>sum + Math.abs(m.percentMove), 0) / filteredData.length : 0;\n    const maxMove = filteredData.length > 0 ? Math.max(...filteredData.map((m)=>Math.abs(m.percentMove))) : 0;\n    const minMove = filteredData.length > 0 ? Math.min(...filteredData.map((m)=>Math.abs(m.percentMove))) : 0;\n    return {\n        inProfitZone: inProfitZoneCount,\n        aboveUpperBreakeven: aboveUpperBreakevenCount,\n        belowLowerBreakeven: belowLowerBreakevenCount,\n        totalSamples: totalValidSamples,\n        profitableRate,\n        upperBreakevenPct: upperBreakevenPct * 100,\n        lowerBreakevenPct: lowerBreakevenPct * 100,\n        avgMove: avgMove * 100,\n        maxMove: maxMove * 100,\n        minMove: minMove * 100,\n        dataQuality: totalValidSamples >= 50 ? \"high\" : totalValidSamples >= 20 ? \"medium\" : totalValidSamples >= 5 ? \"low\" : \"limited\"\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/iron-condor-analysis.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Firon-condor-analysis&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ciron-condor-analysis.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();