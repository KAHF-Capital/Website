"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/iron-condor-options-yahoo";
exports.ids = ["pages/api/iron-condor-options-yahoo"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-fetch");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Firon-condor-options-yahoo&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ciron-condor-options-yahoo.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Firon-condor-options-yahoo&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ciron-condor-options-yahoo.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_iron_condor_options_yahoo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\iron-condor-options-yahoo.js */ \"(api)/./pages/api/iron-condor-options-yahoo.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_iron_condor_options_yahoo_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_iron_condor_options_yahoo_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/iron-condor-options-yahoo\",\n        pathname: \"/api/iron-condor-options-yahoo\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_iron_condor_options_yahoo_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmlyb24tY29uZG9yLW9wdGlvbnMteWFob28mcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2lyb24tY29uZG9yLW9wdGlvbnMteWFob28uanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDdUU7QUFDdkU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLG9FQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxvRUFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rYWhmLWNhcGl0YWwtd2Vic2l0ZS8/NTUzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGlyb24tY29uZG9yLW9wdGlvbnMteWFob28uanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pcm9uLWNvbmRvci1vcHRpb25zLXlhaG9vXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvaXJvbi1jb25kb3Itb3B0aW9ucy15YWhvb1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Firon-condor-options-yahoo&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ciron-condor-options-yahoo.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/iron-condor-options-yahoo.js":
/*!************************************************!*\
  !*** ./pages/api/iron-condor-options-yahoo.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"node-fetch\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_fetch__WEBPACK_IMPORTED_MODULE_0__);\n\n// Yahoo Finance Iron Condor Options Data Fetcher\n// This replaces Polygon.io API calls to avoid rate limiting and 500 errors\n// Yahoo Finance API endpoints (unofficial but stable)\nconst YAHOO_FINANCE_BASE = \"https://query1.finance.yahoo.com/v8/finance/chart\";\nconst YAHOO_OPTIONS_BASE = \"https://query2.finance.yahoo.com/v7/finance/options\";\nconst YAHOO_OPTIONS_ALT = \"https://query1.finance.yahoo.com/v7/finance/options\";\nconst YAHOO_QUOTE_BASE = \"https://query1.finance.yahoo.com/v1/finance/search\";\n// Cache for crumb to reduce API calls\nlet crumbCache = null;\nlet crumbTimestamp = 0;\nconst CRUMB_CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\n// Cache for options data to reduce API calls\nconst optionsCache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n// Get Yahoo Finance crumb for authentication\nasync function getYahooCrumb() {\n    const now = Date.now();\n    // Check cache first\n    if (crumbCache && now - crumbTimestamp < CRUMB_CACHE_DURATION) {\n        return crumbCache;\n    }\n    try {\n        // First, get a quote page to extract the crumb\n        const quoteUrl = \"https://finance.yahoo.com/quote/AAPL\";\n        const headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n            \"Accept-Language\": \"en-US,en;q=0.5\",\n            \"Accept-Encoding\": \"gzip, deflate, br\",\n            \"Connection\": \"keep-alive\",\n            \"Upgrade-Insecure-Requests\": \"1\"\n        };\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_0___default()(quoteUrl, {\n            headers\n        });\n        const html = await response.text();\n        // Extract crumb from the HTML\n        const crumbMatch = html.match(/\"CrumbStore\":\\{\"crumb\":\"([^\"]+)\"/);\n        if (crumbMatch && crumbMatch[1]) {\n            const crumb = crumbMatch[1].replace(/\\\\u002F/g, \"/\");\n            crumbCache = crumb;\n            crumbTimestamp = now;\n            return crumb;\n        }\n        throw new Error(\"Could not extract crumb from Yahoo Finance\");\n    } catch (error) {\n        console.error(\"Error getting Yahoo Finance crumb:\", error.message);\n        throw error;\n    }\n}\n// Get current stock price from Yahoo Finance\nasync function getCurrentPrice(ticker) {\n    try {\n        const url = `${YAHOO_FINANCE_BASE}/${ticker}`;\n        // Add headers to mimic a browser request (same as straddle calculator)\n        const headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n            \"Accept\": \"application/json, text/plain, */*\",\n            \"Accept-Language\": \"en-US,en;q=0.9\",\n            \"Accept-Encoding\": \"gzip, deflate, br\",\n            \"Referer\": \"https://finance.yahoo.com/\",\n            \"Origin\": \"https://finance.yahoo.com\"\n        };\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {\n            headers\n        });\n        if (!response.ok) {\n            throw new Error(`Yahoo Finance API error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n            throw new Error(\"No price data available\");\n        }\n        const result = data.chart.result[0];\n        const currentPrice = result.meta.regularMarketPrice;\n        return {\n            price: currentPrice,\n            currency: result.meta.currency,\n            exchange: result.meta.exchangeName,\n            timestamp: result.meta.regularMarketTime\n        };\n    } catch (error) {\n        console.error(`Error fetching current price for ${ticker}:`, error.message);\n        throw error;\n    }\n}\n// Get available expiration dates for a ticker\nasync function getExpirationDates(ticker) {\n    try {\n        // Get crumb for authentication\n        const crumb = await getYahooCrumb();\n        const url = `${YAHOO_OPTIONS_BASE}/${ticker}?crumb=${crumb}`;\n        // Add headers to mimic a browser request (same as straddle calculator)\n        const headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n            \"Accept\": \"application/json, text/plain, */*\",\n            \"Accept-Language\": \"en-US,en;q=0.9\",\n            \"Accept-Encoding\": \"gzip, deflate, br\",\n            \"Referer\": \"https://finance.yahoo.com/\",\n            \"Origin\": \"https://finance.yahoo.com\"\n        };\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {\n            headers\n        });\n        if (!response.ok) {\n            throw new Error(`Yahoo Finance options API error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.optionChain || !data.optionChain.result || data.optionChain.result.length === 0) {\n            throw new Error(\"No options data available\");\n        }\n        const result = data.optionChain.result[0];\n        const expirations = result.expirationDates || [];\n        // Convert timestamps to date strings\n        const expirationDates = expirations.map((timestamp)=>{\n            const date = new Date(timestamp * 1000);\n            return date.toISOString().split(\"T\")[0]; // YYYY-MM-DD format\n        });\n        return expirationDates.sort();\n    } catch (error) {\n        console.error(`Error fetching expiration dates for ${ticker}:`, error.message);\n        throw error;\n    }\n}\n// Get options data for a specific ticker and expiration\nasync function getOptionsData(ticker, expirationDate) {\n    const cacheKey = `${ticker}-${expirationDate}`;\n    const now = Date.now();\n    // Check cache first\n    if (optionsCache.has(cacheKey)) {\n        const cached = optionsCache.get(cacheKey);\n        if (now - cached.timestamp < CACHE_DURATION) {\n            return cached.data;\n        }\n    }\n    try {\n        // Get crumb for authentication\n        const crumb = await getYahooCrumb();\n        // Convert date to timestamp\n        const expirationTimestamp = Math.floor(new Date(expirationDate).getTime() / 1000);\n        const url = `${YAHOO_OPTIONS_BASE}/${ticker}?date=${expirationTimestamp}&crumb=${crumb}`;\n        // Add headers to mimic a browser request\n        const headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n            \"Accept\": \"application/json, text/plain, */*\",\n            \"Accept-Language\": \"en-US,en;q=0.9\",\n            \"Accept-Encoding\": \"gzip, deflate, br\",\n            \"Referer\": \"https://finance.yahoo.com/\",\n            \"Origin\": \"https://finance.yahoo.com\"\n        };\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {\n            headers\n        });\n        if (!response.ok) {\n            throw new Error(`Yahoo Finance options API error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.optionChain || !data.optionChain.result || data.optionChain.result.length === 0) {\n            throw new Error(\"No options data available for this expiration\");\n        }\n        const result = data.optionChain.result[0];\n        const currentPrice = result.quote.regularMarketPrice;\n        // Get calls and puts\n        const calls = result.options[0]?.calls || [];\n        const puts = result.options[0]?.puts || [];\n        if (calls.length === 0 || puts.length === 0) {\n            throw new Error(\"No options contracts available\");\n        }\n        // Find ATM strike price (closest to current price, rounded to nearest $5)\n        const strikeIncrement = 5;\n        const atmStrike = Math.round(currentPrice / strikeIncrement) * strikeIncrement;\n        // Set up Iron Condor strikes (10 dollar wings by default)\n        const wingWidth = 10;\n        const shortCallStrike = atmStrike;\n        const shortPutStrike = atmStrike;\n        const longCallStrike = atmStrike + wingWidth;\n        const longPutStrike = atmStrike - wingWidth;\n        // Find the specific contracts for our Iron Condor\n        const shortCall = calls.find((call)=>call.strike === shortCallStrike);\n        const shortPut = puts.find((put)=>put.strike === shortPutStrike);\n        const longCall = calls.find((call)=>call.strike === longCallStrike);\n        const longPut = puts.find((put)=>put.strike === longPutStrike);\n        // Check if we have all required contracts\n        const missingContracts = [];\n        if (!shortCall) missingContracts.push(`Short Call ${shortCallStrike}`);\n        if (!shortPut) missingContracts.push(`Short Put ${shortPutStrike}`);\n        if (!longCall) missingContracts.push(`Long Call ${longCallStrike}`);\n        if (!longPut) missingContracts.push(`Long Put ${longPutStrike}`);\n        if (missingContracts.length > 0) {\n            return {\n                error: \"Missing required contracts\",\n                missingContracts,\n                availableStrikes: {\n                    calls: [\n                        ...new Set(calls.map((c)=>c.strike))\n                    ].sort((a, b)=>a - b),\n                    puts: [\n                        ...new Set(puts.map((p)=>p.strike))\n                    ].sort((a, b)=>a - b)\n                },\n                requestedStrikes: {\n                    shortCall: shortCallStrike,\n                    shortPut: shortPutStrike,\n                    longCall: longCallStrike,\n                    longPut: longPutStrike\n                }\n            };\n        }\n        // Calculate Iron Condor premiums using mid prices\n        const shortCallPrice = (shortCall.bid + shortCall.ask) / 2;\n        const shortPutPrice = (shortPut.bid + shortPut.ask) / 2;\n        const longCallPrice = (longCall.bid + longCall.ask) / 2;\n        const longPutPrice = (longPut.bid + longPut.ask) / 2;\n        const callCredit = shortCallPrice - longCallPrice;\n        const putCredit = shortPutPrice - longPutPrice;\n        const totalCredit = callCredit + putCredit;\n        const optionsData = {\n            ticker: ticker.toUpperCase(),\n            currentPrice,\n            expiration: expirationDate,\n            requestedExpiration: expirationDate,\n            executionDate: new Date().toISOString().split(\"T\")[0],\n            strikes: {\n                shortCall: shortCallStrike,\n                shortPut: shortPutStrike,\n                longCall: longCallStrike,\n                longPut: longPutStrike\n            },\n            premiums: {\n                shortCallPrice,\n                shortPutPrice,\n                longCallPrice,\n                longPutPrice,\n                callCredit,\n                putCredit,\n                totalCredit\n            },\n            contracts: {\n                shortCall: `${ticker}${expirationDate.replace(/-/g, \"\")}C${shortCallStrike}000`,\n                shortPut: `${ticker}${expirationDate.replace(/-/g, \"\")}P${shortPutStrike}000`,\n                longCall: `${ticker}${expirationDate.replace(/-/g, \"\")}C${longCallStrike}000`,\n                longPut: `${ticker}${expirationDate.replace(/-/g, \"\")}P${longPutStrike}000`\n            },\n            wingWidth,\n            isNetCredit: totalCredit > 0,\n            source: \"yahoo_finance\",\n            dataQuality: \"high\"\n        };\n        // Cache the result\n        optionsCache.set(cacheKey, {\n            data: optionsData,\n            timestamp: now\n        });\n        return optionsData;\n    } catch (error) {\n        console.error(`Error fetching options data for ${ticker} ${expirationDate}:`, error.message);\n        throw error;\n    }\n}\n// Get Iron Condor data with fallback to estimation\nasync function getIronCondorData(ticker, expirationDate = null) {\n    try {\n        // Get current price first\n        const priceData = await getCurrentPrice(ticker);\n        const currentPrice = priceData.price;\n        // Get available expiration dates\n        let availableExpirations = [];\n        try {\n            availableExpirations = await getExpirationDates(ticker);\n        } catch (error) {\n            console.warn(`Could not get expiration dates for ${ticker}:`, error.message);\n        }\n        // If no expiration date provided, return available expirations\n        if (!expirationDate) {\n            return {\n                ticker,\n                currentPrice,\n                availableExpirations,\n                message: \"Please select an expiration date from the available options\",\n                source: \"expiration_list\",\n                dataQuality: \"none\"\n            };\n        }\n        // Check if the requested expiration date is available\n        if (availableExpirations.length > 0 && !availableExpirations.includes(expirationDate)) {\n            return {\n                ticker,\n                currentPrice,\n                availableExpirations,\n                requestedExpiration: expirationDate,\n                message: `Requested expiration date ${expirationDate} is not available. Please check Yahoo Finance options for ${ticker} to see available dates.`,\n                yahooFinanceUrl: `https://finance.yahoo.com/quote/${ticker}/options`,\n                source: \"expiration_not_available\",\n                dataQuality: \"none\"\n            };\n        }\n        // Try to get real options data for the specified expiration\n        try {\n            const optionsData = await getOptionsData(ticker, expirationDate);\n            // If we got an error about missing contracts, return it\n            if (optionsData.error) {\n                return {\n                    ...optionsData,\n                    ticker,\n                    currentPrice,\n                    availableExpirations,\n                    requestedExpiration: expirationDate\n                };\n            }\n            return {\n                ...optionsData,\n                availableExpirations,\n                requestedExpiration: expirationDate\n            };\n        } catch (error) {\n            console.warn(`Could not get options data for ${ticker} ${expirationDate}, using estimation:`, error.message);\n            // Fallback to estimation (similar to straddle calculator)\n            const estimatedData = estimateIronCondorData(ticker, currentPrice, expirationDate);\n            return {\n                ...estimatedData,\n                availableExpirations,\n                requestedExpiration: expirationDate,\n                source: \"estimation\",\n                dataQuality: \"medium\",\n                note: \"Options data estimated due to Yahoo Finance API limitations\"\n            };\n        }\n    } catch (error) {\n        console.error(`Error getting iron condor data for ${ticker}:`, error.message);\n        throw error;\n    }\n}\n// Estimate Iron Condor data when real options data is not available\nfunction estimateIronCondorData(ticker, currentPrice, expirationDate) {\n    // Calculate days to expiration\n    const expiration = new Date(expirationDate);\n    const today = new Date();\n    const daysToExpiration = Math.ceil((expiration - today) / (1000 * 60 * 60 * 24));\n    // Simple estimation based on current price and time to expiration\n    const volatility = 0.25; // 25% annual volatility (typical for stocks)\n    const timeToExpiration = daysToExpiration / 365;\n    const sqrtTime = Math.sqrt(timeToExpiration);\n    // Estimate ATM option prices using simplified Black-Scholes\n    const estimatedOptionPrice = currentPrice * volatility * sqrtTime * 0.4;\n    // Set up Iron Condor strikes (10 dollar wings by default)\n    const wingWidth = 10;\n    const strikeIncrement = 5;\n    const atmStrike = Math.round(currentPrice / strikeIncrement) * strikeIncrement;\n    const shortCallStrike = atmStrike;\n    const shortPutStrike = atmStrike;\n    const longCallStrike = atmStrike + wingWidth;\n    const longPutStrike = atmStrike - wingWidth;\n    // Estimate premiums (shorter strikes have higher premiums)\n    const shortCallPrice = estimatedOptionPrice;\n    const shortPutPrice = estimatedOptionPrice;\n    const longCallPrice = estimatedOptionPrice * 0.3; // Longer strikes are cheaper\n    const longPutPrice = estimatedOptionPrice * 0.3;\n    const callCredit = shortCallPrice - longCallPrice;\n    const putCredit = shortPutPrice - longPutPrice;\n    const totalCredit = callCredit + putCredit;\n    return {\n        ticker: ticker.toUpperCase(),\n        currentPrice,\n        expiration: expirationDate,\n        executionDate: new Date().toISOString().split(\"T\")[0],\n        strikes: {\n            shortCall: shortCallStrike,\n            shortPut: shortPutStrike,\n            longCall: longCallStrike,\n            longPut: longPutStrike\n        },\n        premiums: {\n            shortCallPrice,\n            shortPutPrice,\n            longCallPrice,\n            longPutPrice,\n            callCredit,\n            putCredit,\n            totalCredit\n        },\n        contracts: {\n            shortCall: `${ticker}${expirationDate.replace(/-/g, \"\")}C${shortCallStrike}000`,\n            shortPut: `${ticker}${expirationDate.replace(/-/g, \"\")}P${shortPutStrike}000`,\n            longCall: `${ticker}${expirationDate.replace(/-/g, \"\")}C${longCallStrike}000`,\n            longPut: `${ticker}${expirationDate.replace(/-/g, \"\")}P${longPutStrike}000`\n        },\n        wingWidth,\n        isNetCredit: totalCredit > 0\n    };\n}\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { ticker, expiration } = req.query;\n    if (!ticker) {\n        return res.status(400).json({\n            error: \"Ticker is required\"\n        });\n    }\n    try {\n        const ironCondorData = await getIronCondorData(ticker, expiration);\n        // If we have an error about missing contracts, return 404\n        if (ironCondorData.error) {\n            return res.status(404).json(ironCondorData);\n        }\n        // If we have a message indicating no data, return 200 with the message\n        if (ironCondorData.message) {\n            return res.status(200).json(ironCondorData);\n        }\n        // Return successful data\n        return res.status(200).json(ironCondorData);\n    } catch (error) {\n        console.error(\"Error in iron-condor-options-yahoo API:\", error);\n        return res.status(500).json({\n            error: \"Failed to fetch iron condor options\",\n            details:  true ? error.message : 0\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/iron-condor-options-yahoo.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Firon-condor-options-yahoo&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ciron-condor-options-yahoo.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();