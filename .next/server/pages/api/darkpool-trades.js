"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/darkpool-trades";
exports.ids = ["pages/api/darkpool-trades"];
exports.modules = {

/***/ "csv-parser":
/*!*****************************!*\
  !*** external "csv-parser" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("csv-parser");

/***/ }),

/***/ "csv-writer":
/*!*****************************!*\
  !*** external "csv-writer" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("csv-writer");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdarkpool-trades&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdarkpool-trades.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdarkpool-trades&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdarkpool-trades.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_darkpool_trades_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\darkpool-trades.js */ \"(api)/./pages/api/darkpool-trades.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_darkpool_trades_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_darkpool_trades_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/darkpool-trades\",\n        pathname: \"/api/darkpool-trades\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_darkpool_trades_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmRhcmtwb29sLXRyYWRlcyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDZGFya3Bvb2wtdHJhZGVzLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzZEO0FBQzdEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQywwREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsMERBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2FoZi1jYXBpdGFsLXdlYnNpdGUvPzNlMmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxkYXJrcG9vbC10cmFkZXMuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kYXJrcG9vbC10cmFkZXNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kYXJrcG9vbC10cmFkZXNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdarkpool-trades&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdarkpool-trades.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/darkpool-trades.js":
/*!**************************************!*\
  !*** ./pages/api/darkpool-trades.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst csv = __webpack_require__(/*! csv-parser */ \"csv-parser\");\nconst createCsvWriter = (__webpack_require__(/*! csv-writer */ \"csv-writer\").createObjectCsvWriter);\n// Data directory for CSV files\nconst DATA_DIR = path.join(process.cwd(), \"data\");\nconst DAILY_CSV_DIR = path.join(DATA_DIR, \"daily\");\nconst HISTORICAL_CSV_PATH = path.join(DATA_DIR, \"darkpool_history.csv\");\n// Ensure directories exist\nfunction ensureDirectories() {\n    if (!fs.existsSync(DATA_DIR)) {\n        fs.mkdirSync(DATA_DIR, {\n            recursive: true\n        });\n    }\n    if (!fs.existsSync(DAILY_CSV_DIR)) {\n        fs.mkdirSync(DAILY_CSV_DIR, {\n            recursive: true\n        });\n    }\n}\n// Parse CSV file and extract dark pool trades with memory limits\nfunction parseDarkPoolTrades(csvFilePath) {\n    return new Promise((resolve, reject)=>{\n        const darkPoolTrades = [];\n        let rowCount = 0;\n        const MAX_ROWS = 100000; // Limit to 100k rows to prevent memory issues\n        fs.createReadStream(csvFilePath).pipe(csv()).on(\"data\", (row)=>{\n            rowCount++;\n            // Stop processing if we hit the limit\n            if (rowCount > MAX_ROWS) {\n                console.log(`Reached row limit (${MAX_ROWS}), stopping processing`);\n                return;\n            }\n            // Check if this is a dark pool trade\n            // Dark pool trades have exchange = 4 AND trf_id present\n            if (row.exchange === \"4\" && row.trf_id && row.trf_id.trim() !== \"\") {\n                darkPoolTrades.push({\n                    ticker: row.ticker || row.symbol || \"UNKNOWN\",\n                    volume: parseInt(row.size || row.volume || 0),\n                    price: parseFloat(row.price || row.p || 0),\n                    timestamp: row.timestamp || row.t || new Date().toISOString(),\n                    exchange: row.exchange,\n                    trf_id: row.trf_id\n                });\n            }\n        }).on(\"end\", ()=>{\n            console.log(`Processed ${rowCount} rows, found ${darkPoolTrades.length} dark pool trades`);\n            resolve(darkPoolTrades);\n        }).on(\"error\", (error)=>{\n            reject(error);\n        });\n    });\n}\n// Group dark pool trades by ticker and calculate totals\nfunction groupTradesByTicker(trades) {\n    const tickerMap = {};\n    trades.forEach((trade)=>{\n        const ticker = trade.ticker.toUpperCase();\n        if (!tickerMap[ticker]) {\n            tickerMap[ticker] = {\n                ticker: ticker,\n                total_volume: 0,\n                trade_count: 0,\n                avg_price: 0,\n                total_value: 0\n            };\n        }\n        tickerMap[ticker].total_volume += trade.volume;\n        tickerMap[ticker].trade_count += 1;\n        tickerMap[ticker].total_value += trade.volume * trade.price;\n    });\n    // Calculate average price\n    Object.values(tickerMap).forEach((tickerData)=>{\n        tickerData.avg_price = tickerData.total_value / tickerData.total_volume;\n    });\n    // Convert to array and sort by volume\n    return Object.values(tickerMap).sort((a, b)=>b.total_volume - a.total_volume);\n}\n// Save dark pool data to historical CSV\nfunction saveToHistoricalCSV(trades, date) {\n    const csvWriter = createCsvWriter({\n        path: HISTORICAL_CSV_PATH,\n        header: [\n            {\n                id: \"date\",\n                title: \"DATE\"\n            },\n            {\n                id: \"ticker\",\n                title: \"TICKER\"\n            },\n            {\n                id: \"total_volume\",\n                title: \"TOTAL_VOLUME\"\n            },\n            {\n                id: \"trade_count\",\n                title: \"TRADE_COUNT\"\n            },\n            {\n                id: \"avg_price\",\n                title: \"AVG_PRICE\"\n            },\n            {\n                id: \"total_value\",\n                title: \"TOTAL_VALUE\"\n            }\n        ],\n        append: fs.existsSync(HISTORICAL_CSV_PATH)\n    });\n    const records = trades.map((trade)=>({\n            date: date,\n            ticker: trade.ticker,\n            total_volume: trade.total_volume,\n            trade_count: trade.trade_count,\n            avg_price: trade.avg_price.toFixed(2),\n            total_value: trade.total_value.toFixed(2)\n        }));\n    return csvWriter.writeRecords(records);\n}\n// Get latest CSV file from daily directory\nfunction getLatestCSVFile() {\n    const files = fs.readdirSync(DAILY_CSV_DIR).filter((file)=>file.endsWith(\".csv\")).map((file)=>({\n            name: file,\n            path: path.join(DAILY_CSV_DIR, file),\n            mtime: fs.statSync(path.join(DAILY_CSV_DIR, file)).mtime\n        })).sort((a, b)=>b.mtime - a.mtime);\n    return files.length > 0 ? files[0] : null;\n}\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        ensureDirectories();\n        const { save = \"false\" } = req.query;\n        const currentDate = new Date().toISOString().split(\"T\")[0];\n        // Get the latest CSV file\n        const latestFile = getLatestCSVFile();\n        if (!latestFile) {\n            return res.status(404).json({\n                error: \"No CSV files found\",\n                message: `Please upload a CSV file to the ${DAILY_CSV_DIR} directory`,\n                instructions: [\n                    \"1. Download your Polygon.io CSV file\",\n                    \"2. Upload it to the data/daily folder\",\n                    \"3. Refresh this page to analyze the data\"\n                ]\n            });\n        }\n        console.log(`Processing CSV file: ${latestFile.name}`);\n        // Parse the CSV file\n        const darkPoolTrades = await parseDarkPoolTrades(latestFile.path);\n        if (darkPoolTrades.length === 0) {\n            return res.status(200).json({\n                date: currentDate,\n                trades: [],\n                total_tickers: 0,\n                last_updated: new Date().toISOString(),\n                message: \"No dark pool trades found in the CSV file\",\n                file_processed: latestFile.name\n            });\n        }\n        // Group trades by ticker\n        const groupedTrades = groupTradesByTicker(darkPoolTrades);\n        // Save to historical CSV if requested\n        if (save === \"true\") {\n            try {\n                await saveToHistoricalCSV(groupedTrades, currentDate);\n                console.log(`Saved ${groupedTrades.length} tickers to historical CSV`);\n            } catch (error) {\n                console.error(\"Error saving to historical CSV:\", error);\n            }\n        }\n        return res.status(200).json({\n            date: currentDate,\n            trades: groupedTrades,\n            total_tickers: groupedTrades.length,\n            total_trades: darkPoolTrades.length,\n            last_updated: new Date().toISOString(),\n            file_processed: latestFile.name,\n            file_date: latestFile.mtime.toISOString(),\n            saved_to_history: save === \"true\"\n        });\n    } catch (error) {\n        console.error(\"Error processing CSV:\", error);\n        return res.status(500).json({\n            error: \"Error processing CSV file\",\n            details:  true ? error.message : 0\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/darkpool-trades.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdarkpool-trades&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdarkpool-trades.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();